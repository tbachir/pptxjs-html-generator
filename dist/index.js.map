{"version":3,"sources":["../src/index.ts","../src/main/PptxProcessor.ts"],"sourcesContent":["export { PptxProcessor } from './main/PptxProcessor';\r\nexport type { \r\n  SlideData, \r\n  VideoAsset, \r\n  ImageAsset, \r\n  PptxData, \r\n  RenderOptions \r\n} from './types';","\r\nimport JSZip from 'jszip';\r\nimport { ImageAsset, PptxData, RenderOptions, VideoAsset } from '../types';\r\n\r\nexport class PptxProcessor {\r\n    private pptxData: PptxData | null = null;\r\n    private zip: JSZip | null = null;\r\n    private slideCSS: string = `\r\n.slide {\r\n  position: relative;\r\n  border: 1px solid #333;\r\n  border-radius: 10px;\r\n  overflow: hidden;\r\n  margin-bottom: 50px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n}\r\n.slide div.block {\r\n  position: absolute;\r\n  top: 0px;\r\n  left: 0px;\r\n  width: 100%;\r\n  line-height: 1;\r\n}\r\n.slide div.content {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n.slide div.diagram-content{\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n.slide div.content-rtl {\r\n  display: flex;\r\n  flex-direction: column;\r\n  direction: rtl; \r\n}\r\n.slide .pregraph-rtl{\r\n  direction: rtl; \r\n}\r\n.slide .pregraph-ltr{\r\n  direction: ltr; \r\n}\r\n.slide .pregraph-inherit{\r\n  direction: inherit; \r\n}\r\n.slide .slide-prgrph{\r\n  width: 100%;\r\n}\r\n.slide .line-break-br::before{\r\n  content: \"\\\\A\";\r\n  white-space: pre;\r\n}\r\n.slide div.v-up {\r\n  justify-content: flex-start;\r\n}\r\n.slide div.v-mid {\r\n  justify-content: center;\r\n}\r\n.slide div.v-down {\r\n  justify-content: flex-end;\r\n}\r\n.slide div.h-left {\r\n  justify-content: flex-start;\r\n  align-items: flex-start;\r\n  text-align: left;\r\n}\r\n.slide div.h-left-rtl {\r\n  justify-content: flex-end;\r\n  align-items: flex-end;\r\n  text-align: left;\r\n}\r\n.slide div.h-mid {\r\n  justify-content: center;\r\n  align-items: center;\r\n  text-align: center;\r\n}\r\n.slide div.h-right {\r\n  justify-content: flex-end;\r\n  align-items: flex-end;\r\n  text-align: right;\r\n}\r\n.slide div.h-right-rtl {\r\n  justify-content: flex-start;\r\n  align-items: flex-start;\r\n  text-align: right;\r\n}\r\n.slide div.h-just,\r\n.slide div.h-dist {\r\n  text-align: justify;\r\n}\r\n.slide div.up-left {\r\n  justify-content: flex-start;\r\n  align-items: flex-start;\r\n  text-align: left;\r\n}\r\n.slide div.up-center {\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n}\r\n.slide div.up-right {\r\n  justify-content: flex-start;\r\n  align-items: flex-end;\r\n}\r\n.slide div.center-left {\r\n  justify-content: center;\r\n  align-items: flex-start;\r\n  text-align: left;\r\n}\r\n.slide div.center-center {\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n.slide div.center-right {\r\n  justify-content: center;\r\n  align-items: flex-end;\r\n}\r\n.slide div.down-left {\r\n  justify-content: flex-end;\r\n  align-items: flex-start;\r\n  text-align: left;\r\n}\r\n.slide div.down-center {\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n}\r\n.slide div.down-right {\r\n  justify-content: flex-end;\r\n  align-items: flex-end;\r\n}\r\n.slide li.slide {\r\n  margin: 10px 0px;\r\n  font-size: 18px;\r\n}\r\n.slide table {\r\n  position: absolute;\r\n}\r\n.slide svg.drawing {\r\n  position: absolute;\r\n  overflow: visible;\r\n}\r\n`;\r\n\r\n    constructor() { }\r\n\r\n    async loadFile(file: File | ArrayBuffer): Promise<void> {\r\n        const arrayBuffer = file instanceof File ? await file.arrayBuffer() : file;\r\n        this.zip = await JSZip.loadAsync(arrayBuffer);\r\n        this.pptxData = await this.parsePptxData();\r\n    }\r\n\r\n    getSlideCount(): number {\r\n        return this.pptxData?.slides.length || 0;\r\n    }\r\n\r\n    getSlideHTML(slideIndex: number, options: RenderOptions = {}): string {\r\n        if (!this.pptxData || slideIndex >= this.pptxData.slides.length) {\r\n            throw new Error(`Slide ${slideIndex} not found`);\r\n        }\r\n\r\n        const slide = this.pptxData.slides[slideIndex];\r\n        return this.renderSlideToHTML(slide, slideIndex, options);\r\n    }\r\n\r\n    getAllSlidesHTML(options: RenderOptions = {}): string[] {\r\n        if (!this.pptxData) {\r\n            throw new Error('No PPTX data loaded');\r\n        }\r\n\r\n        return this.pptxData.slides.map((slide, index) =>\r\n            this.renderSlideToHTML(slide, index, options)\r\n        );\r\n    }\r\n\r\n    getSlideCSS(): string {\r\n        return this.slideCSS;\r\n    }\r\n\r\n    getMediaAssets(): Map<string, VideoAsset | ImageAsset> {\r\n        return this.pptxData?.media || new Map();\r\n    }\r\n\r\n    private async parsePptxData(): Promise<PptxData> {\r\n        if (!this.zip) throw new Error('No ZIP data loaded');\r\n\r\n        const slides: any[] = [];\r\n        const slideLayouts: any[] = [];\r\n        const slideMasters: any[] = [];\r\n        const media = new Map<string, VideoAsset | ImageAsset>();\r\n\r\n        // Parse slides\r\n        const slideFiles = Object.keys(this.zip.files).filter(name =>\r\n            name.startsWith('ppt/slides/slide') && name.endsWith('.xml')\r\n        );\r\n\r\n        for (const slideFile of slideFiles) {\r\n            const slideXml = await this.zip.files[slideFile].async('text');\r\n            const slideData = this.parseXML(slideXml);\r\n            slides.push(slideData);\r\n        }\r\n\r\n        // Parse slide layouts\r\n        const layoutFiles = Object.keys(this.zip.files).filter(name =>\r\n            name.startsWith('ppt/slideLayouts/') && name.endsWith('.xml')\r\n        );\r\n\r\n        for (const layoutFile of layoutFiles) {\r\n            const layoutXml = await this.zip.files[layoutFile].async('text');\r\n            const layoutData = this.parseXML(layoutXml);\r\n            slideLayouts.push(layoutData);\r\n        }\r\n\r\n        // Parse slide masters\r\n        const masterFiles = Object.keys(this.zip.files).filter(name =>\r\n            name.startsWith('ppt/slideMasters/') && name.endsWith('.xml')\r\n        );\r\n\r\n        for (const masterFile of masterFiles) {\r\n            const masterXml = await this.zip.files[masterFile].async('text');\r\n            const masterData = this.parseXML(masterXml);\r\n            slideMasters.push(masterData);\r\n        }\r\n\r\n        // Extract media (images and videos)\r\n        await this.extractMedia(media);\r\n\r\n        // Parse theme\r\n        const themeFile = Object.keys(this.zip.files).find(name =>\r\n            name.startsWith('ppt/theme/') && name.endsWith('.xml')\r\n        );\r\n        let theme = null;\r\n        if (themeFile) {\r\n            const themeXml = await this.zip.files[themeFile].async('text');\r\n            theme = this.parseXML(themeXml);\r\n        }\r\n\r\n        return {\r\n            slides,\r\n            slideLayouts,\r\n            slideMasters,\r\n            theme,\r\n            media\r\n        };\r\n    }\r\n\r\n    private async extractMedia(media: Map<string, VideoAsset | ImageAsset>): Promise<void> {\r\n        if (!this.zip) return;\r\n\r\n        const mediaFiles = Object.keys(this.zip.files).filter(name =>\r\n            name.startsWith('ppt/media/')\r\n        );\r\n\r\n        for (const mediaFile of mediaFiles) {\r\n            const fileName = mediaFile.split('/').pop() || '';\r\n            const data = await this.zip.files[mediaFile].async('arraybuffer');\r\n            const mimeType = this.getMimeType(fileName);\r\n\r\n            const asset: VideoAsset | ImageAsset = {\r\n                id: fileName,\r\n                data,\r\n                mimeType,\r\n                fileName\r\n            };\r\n\r\n            media.set(fileName, asset);\r\n        }\r\n    }\r\n\r\n    private getMimeType(fileName: string): string {\r\n        const ext = fileName.split('.').pop()?.toLowerCase();\r\n        const mimeTypes: Record<string, string> = {\r\n            mp4: 'video/mp4',\r\n            webm: 'video/webm',\r\n            mov: 'video/quicktime',\r\n            avi: 'video/x-msvideo',\r\n            jpg: 'image/jpeg',\r\n            jpeg: 'image/jpeg',\r\n            png: 'image/png',\r\n            gif: 'image/gif',\r\n            svg: 'image/svg+xml'\r\n        };\r\n        return mimeTypes[ext || ''] || 'application/octet-stream';\r\n    }\r\n\r\n    private parseXML(xmlString: string): any {\r\n        // Simplified XML parser - we'll enhance this with the original tXml logic\r\n        const parser = new DOMParser();\r\n        const xmlDoc = parser.parseFromString(xmlString, 'text/xml');\r\n        return this.domToObject(xmlDoc.documentElement);\r\n    }\r\n\r\n    private domToObject(node: Element): any {\r\n        const result: any = {};\r\n\r\n        // Handle attributes\r\n        if (node.attributes.length > 0) {\r\n            result.attrs = {};\r\n            for (let i = 0; i < node.attributes.length; i++) {\r\n                const attr = node.attributes[i];\r\n                result.attrs[attr.name] = attr.value;\r\n            }\r\n        }\r\n\r\n        // Handle children\r\n        if (node.children.length > 0) {\r\n            for (let i = 0; i < node.children.length; i++) {\r\n                const child = node.children[i];\r\n                const childName = child.tagName;\r\n                const childObject = this.domToObject(child);\r\n\r\n                if (result[childName]) {\r\n                    if (!Array.isArray(result[childName])) {\r\n                        result[childName] = [result[childName]];\r\n                    }\r\n                    result[childName].push(childObject);\r\n                } else {\r\n                    result[childName] = childObject;\r\n                }\r\n            }\r\n        } else if (node.textContent && node.textContent.trim()) {\r\n            return node.textContent.trim();\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private renderSlideToHTML(slide: any, slideIndex: number, options: RenderOptions): string {\r\n        if (!this.pptxData) throw new Error('No PPTX data loaded');\r\n\r\n        const width = options.slideWidth || 960;\r\n        const height = options.slideHeight || 720;\r\n\r\n        // Create warp object for processing\r\n        const warpObj = {\r\n            slideLayoutTables: this.createTables(this.pptxData.slideLayouts),\r\n            slideMasterTables: this.createTables(this.pptxData.slideMasters),\r\n            theme: this.pptxData.theme,\r\n            media: this.pptxData.media\r\n        };\r\n\r\n        let html = `<div class=\"slide\" style=\"width: ${width}px; height: ${height}px;\">`;\r\n\r\n        // Process slide content\r\n        const sldData = slide[\"p:sld\"] || slide;\r\n        const cSld = sldData[\"p:cSld\"];\r\n\r\n        if (cSld && cSld[\"p:spTree\"]) {\r\n            const spTree = cSld[\"p:spTree\"];\r\n\r\n            // Process each element in the slide\r\n            Object.keys(spTree).forEach(nodeKey => {\r\n                if (nodeKey !== \"attrs\") {\r\n                    const nodeValue = spTree[nodeKey];\r\n                    if (Array.isArray(nodeValue)) {\r\n                        nodeValue.forEach(node => {\r\n                            html += this.processNodesInSlide(nodeKey, node, spTree, warpObj, \"slide\", \"slide\");\r\n                        });\r\n                    } else {\r\n                        html += this.processNodesInSlide(nodeKey, nodeValue, spTree, warpObj, \"slide\", \"slide\");\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        html += '</div>';\r\n        return html;\r\n    }\r\n\r\n    private createTables(layouts: any[]): any {\r\n        const idTable: any = {};\r\n        const idxTable: any = {};\r\n        const typeTable: any = {};\r\n\r\n        layouts.forEach(layout => {\r\n            const spTree = layout[\"p:sldLayout\"]?.[\"p:cSld\"]?.[\"p:spTree\"] ||\r\n                layout[\"p:sldMaster\"]?.[\"p:cSld\"]?.[\"p:spTree\"];\r\n\r\n            if (spTree) {\r\n                Object.keys(spTree).forEach(key => {\r\n                    if (key === \"p:sp\" && spTree[key]) {\r\n                        const shapes = Array.isArray(spTree[key]) ? spTree[key] : [spTree[key]];\r\n                        shapes.forEach(shape => {\r\n                            const id = this.getTextByPathList(shape, [\"p:nvSpPr\", \"p:cNvPr\", \"attrs\", \"id\"]);\r\n                            const idx = this.getTextByPathList(shape, [\"p:nvSpPr\", \"p:nvPr\", \"p:ph\", \"attrs\", \"idx\"]);\r\n                            const type = this.getTextByPathList(shape, [\"p:nvSpPr\", \"p:nvPr\", \"p:ph\", \"attrs\", \"type\"]);\r\n\r\n                            if (id !== undefined) idTable[id] = shape;\r\n                            if (idx !== undefined) idxTable[idx] = shape;\r\n                            if (type !== undefined) typeTable[type] = shape;\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        return { idTable, idxTable, typeTable };\r\n    }\r\n\r\n    private processNodesInSlide(\r\n        nodeKey: string,\r\n        nodeValue: any,\r\n        nodes: any,\r\n        warpObj: any,\r\n        source: string,\r\n        sType: string\r\n    ): string {\r\n        let result = \"\";\r\n\r\n        switch (nodeKey) {\r\n            case \"p:sp\":    // Shape, Text\r\n                result = this.processSpNode(nodeValue, nodes, warpObj, source, sType);\r\n                break;\r\n            case \"p:cxnSp\":    // Shape, Text (with connection)\r\n                result = this.processCxnSpNode(nodeValue, nodes, warpObj, source, sType);\r\n                break;\r\n            case \"p:pic\":    // Picture\r\n                result = this.processPicNode(nodeValue, warpObj, source, sType);\r\n                break;\r\n            case \"p:graphicFrame\":    // Chart, Diagram, Table\r\n                result = this.processGraphicFrameNode(nodeValue, warpObj, source, sType);\r\n                break;\r\n            case \"p:grpSp\":\r\n                result = this.processGroupSpNode(nodeValue, warpObj, source);\r\n                break;\r\n            case \"mc:AlternateContent\": // Equations and formulas as Image\r\n                const mcFallbackNode = this.getTextByPathList(nodeValue, [\"mc:Fallback\", \"p:sp\"]);\r\n                if (mcFallbackNode !== undefined) {\r\n                    result = this.processSpNode(mcFallbackNode, nodes, warpObj, source, sType);\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private processSpNode(node: any, pNode: any, warpObj: any, source: string, sType: string): string {\r\n        const id = this.getTextByPathList(node, [\"p:nvSpPr\", \"p:cNvPr\", \"attrs\", \"id\"]);\r\n        const name = this.getTextByPathList(node, [\"p:nvSpPr\", \"p:cNvPr\", \"attrs\", \"name\"]);\r\n        const idx = this.getTextByPathList(node, [\"p:nvSpPr\", \"p:nvPr\", \"p:ph\", \"attrs\", \"idx\"]);\r\n        let type = this.getTextByPathList(node, [\"p:nvSpPr\", \"p:nvPr\", \"p:ph\", \"attrs\", \"type\"]);\r\n        const order = this.getTextByPathList(node, [\"attrs\", \"order\"]) || 0;\r\n\r\n        // Determine layout and master nodes\r\n        let slideLayoutSpNode, slideMasterSpNode;\r\n        if (idx !== undefined) {\r\n            slideLayoutSpNode = warpObj.slideLayoutTables?.idxTable?.[idx];\r\n            slideMasterSpNode = warpObj.slideMasterTables?.typeTable?.[type] ||\r\n                warpObj.slideMasterTables?.idxTable?.[idx];\r\n        } else if (type !== undefined) {\r\n            slideLayoutSpNode = warpObj.slideLayoutTables?.typeTable?.[type];\r\n            slideMasterSpNode = warpObj.slideMasterTables?.typeTable?.[type];\r\n        }\r\n\r\n        // Determine type if undefined\r\n        if (type === undefined) {\r\n            const txBoxVal = this.getTextByPathList(node, [\"p:nvSpPr\", \"p:cNvSpPr\", \"attrs\", \"txBox\"]);\r\n            if (txBoxVal === \"1\") {\r\n                type = \"textBox\";\r\n            } else {\r\n                type = this.getTextByPathList(slideLayoutSpNode, [\"p:nvSpPr\", \"p:nvPr\", \"p:ph\", \"attrs\", \"type\"]) || \"obj\";\r\n            }\r\n        }\r\n\r\n        return this.genShape(node, pNode, slideLayoutSpNode, slideMasterSpNode, id, name, idx, type, order, warpObj, undefined, sType, source);\r\n    }\r\n\r\n    private processCxnSpNode(node: any, pNode: any, warpObj: any, source: string, sType: string): string {\r\n        const id = this.getTextByPathList(node, [\"p:nvCxnSpPr\", \"p:cNvPr\", \"attrs\", \"id\"]);\r\n        const name = this.getTextByPathList(node, [\"p:nvCxnSpPr\", \"p:cNvPr\", \"attrs\", \"name\"]);\r\n        const idx = this.getTextByPathList(node, [\"p:nvCxnSpPr\", \"p:nvPr\", \"p:ph\", \"attrs\", \"idx\"]);\r\n        const type = this.getTextByPathList(node, [\"p:nvCxnSpPr\", \"p:nvPr\", \"p:ph\", \"attrs\", \"type\"]) || \"obj\";\r\n        const order = this.getTextByPathList(node, [\"attrs\", \"order\"]) || 0;\r\n\r\n        return this.genShape(node, pNode, undefined, undefined, id, name, idx, type, order, warpObj, undefined, sType, source);\r\n    }\r\n\r\n    private processPicNode(node: any, warpObj: any, source: string, sType: string): string {\r\n        const id = this.getTextByPathList(node, [\"p:nvPicPr\", \"p:cNvPr\", \"attrs\", \"id\"]);\r\n        const name = this.getTextByPathList(node, [\"p:nvPicPr\", \"p:cNvPr\", \"attrs\", \"name\"]);\r\n        const order = this.getTextByPathList(node, [\"attrs\", \"order\"]) || 0;\r\n\r\n        // Get transform information\r\n        const xfrmNode = this.getTextByPathList(node, [\"p:spPr\", \"a:xfrm\"]);\r\n        const position = this.getPosition(xfrmNode, node);\r\n        const size = this.getSize(xfrmNode);\r\n\r\n        // Get image reference\r\n        const blipNode = this.getTextByPathList(node, [\"p:blipFill\", \"a:blip\"]);\r\n        const rId = this.getTextByPathList(blipNode, [\"attrs\", \"r:embed\"]);\r\n\r\n        if (rId && warpObj.media) {\r\n            // Find the media asset\r\n            for (const [key, asset] of warpObj.media) {\r\n                if (key.includes(rId) || asset.id === rId) {\r\n                    const style = `${position} ${size} z-index: ${order};`;\r\n\r\n                    if (asset.mimeType.startsWith('video/')) {\r\n                        return this.createVideoElement(asset, style);\r\n                    } else {\r\n                        return this.createImageElement(asset, style);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return `<div class=\"block\" style=\"${position} ${size} background: #f0f0f0; z-index: ${order};\"></div>`;\r\n    }\r\n\r\n    private processGraphicFrameNode(node: any, warpObj: any, source: string, sType: string): string {\r\n        const id = this.getTextByPathList(node, [\"p:nvGraphicFramePr\", \"p:cNvPr\", \"attrs\", \"id\"]);\r\n        const order = this.getTextByPathList(node, [\"attrs\", \"order\"]) || 0;\r\n\r\n        // Get transform information\r\n        const xfrmNode = this.getTextByPathList(node, [\"p:xfrm\"]);\r\n        const position = this.getPosition(xfrmNode, node);\r\n        const size = this.getSize(xfrmNode);\r\n\r\n        // Check if it's a table\r\n        const tableNode = this.getTextByPathList(node, [\"a:graphic\", \"a:graphicData\", \"a:tbl\"]);\r\n        if (tableNode) {\r\n            return this.genTable(tableNode, node, warpObj);\r\n        }\r\n\r\n        // Check if it's a chart\r\n        const chartNode = this.getTextByPathList(node, [\"a:graphic\", \"a:graphicData\", \"c:chart\"]);\r\n        if (chartNode) {\r\n            return this.genChart(chartNode, node, warpObj);\r\n        }\r\n\r\n        return `<div class=\"block\" style=\"${position} ${size} z-index: ${order};\"></div>`;\r\n    }\r\n\r\n    private processGroupSpNode(node: any, warpObj: any, source: string): string {\r\n        let result = \"\";\r\n        const spTree = this.getTextByPathList(node, [\"p:spTree\"]);\r\n\r\n        if (spTree) {\r\n            Object.keys(spTree).forEach(key => {\r\n                if (key !== \"attrs\") {\r\n                    const nodeValue = spTree[key];\r\n                    result += this.processNodesInSlide(key, nodeValue, node, warpObj, source, \"\");\r\n                }\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private genShape(\r\n        node: any, pNode: any, slideLayoutSpNode: any, slideMasterSpNode: any,\r\n        id: string, name: string, idx: string, type: string, order: number,\r\n        warpObj: any, isUserDrawnBg?: boolean, sType?: string, source?: string\r\n    ): string {\r\n        const slideXfrmNode = this.getTextByPathList(node, [\"p:spPr\", \"a:xfrm\"]);\r\n        const position = this.getPosition(slideXfrmNode, pNode);\r\n        const size = this.getSize(slideXfrmNode);\r\n\r\n        let result = `<div class='block content' ` +\r\n            `_id='${id}' _idx='${idx}' _type='${type}' _name='${name}' ` +\r\n            `style='${position} ${size} z-index: ${order};'>`;\r\n\r\n        // TextBody\r\n        if (node[\"p:txBody\"] !== undefined) {\r\n            result += this.genTextBody(node[\"p:txBody\"], node, slideLayoutSpNode, slideMasterSpNode, type, idx, warpObj);\r\n        }\r\n\r\n        result += \"</div>\";\r\n        return result;\r\n    }\r\n\r\n    private genTextBody(txBodyNode: any, spNode: any, slideLayoutSpNode: any, slideMasterSpNode: any, type: string, idx: string, warpObj: any): string {\r\n        let result = \"\";\r\n        const paragraphs = txBodyNode[\"a:p\"];\r\n\r\n        if (paragraphs) {\r\n            const pArray = Array.isArray(paragraphs) ? paragraphs : [paragraphs];\r\n            pArray.forEach(pNode => {\r\n                result += this.genParagraph(pNode, spNode, slideLayoutSpNode, slideMasterSpNode, type, idx, warpObj);\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private genParagraph(pNode: any, spNode: any, slideLayoutSpNode: any, slideMasterSpNode: any, type: string, idx: string, warpObj: any): string {\r\n        let result = \"\";\r\n        const pPr = pNode[\"a:pPr\"];\r\n        const runs = pNode[\"a:r\"];\r\n\r\n        const algn = this.getTextByPathList(pPr, [\"attrs\", \"algn\"]) || \"left\";\r\n        const lvl = parseInt(this.getTextByPathList(pPr, [\"attrs\", \"lvl\"]) || \"0\");\r\n\r\n        result += `<div class=\"slide-prgrph\" style=\"text-align: ${algn}; margin-left: ${lvl * 20}px;\">`;\r\n\r\n        if (runs) {\r\n            const rArray = Array.isArray(runs) ? runs : [runs];\r\n            rArray.forEach(rNode => {\r\n                result += this.genTextRun(rNode, pNode, spNode, slideLayoutSpNode, slideMasterSpNode, type, idx, warpObj);\r\n            });\r\n        }\r\n\r\n        result += \"</div>\";\r\n        return result;\r\n    }\r\n\r\n    private genTextRun(rNode: any, pNode: any, spNode: any, slideLayoutSpNode: any, slideMasterSpNode: any, type: string, idx: string, warpObj: any): string {\r\n        const text = this.getTextByPathList(rNode, [\"a:t\"]) || \"\";\r\n        const rPr = rNode[\"a:rPr\"];\r\n\r\n        if (!text) return \"\";\r\n\r\n        let style = \"\";\r\n\r\n        // Font size\r\n        const sz = this.getTextByPathList(rPr, [\"attrs\", \"sz\"]);\r\n        if (sz) {\r\n            style += `font-size: ${parseInt(sz) / 100}pt;`;\r\n        }\r\n\r\n        // Font family\r\n        const typeface = this.getTextByPathList(rPr, [\"a:latin\", \"attrs\", \"typeface\"]);\r\n        if (typeface) {\r\n            style += `font-family: \"${typeface}\";`;\r\n        }\r\n\r\n        // Bold\r\n        const b = this.getTextByPathList(rPr, [\"attrs\", \"b\"]);\r\n        if (b === \"1\") {\r\n            style += \"font-weight: bold;\";\r\n        }\r\n\r\n        // Italic\r\n        const i = this.getTextByPathList(rPr, [\"attrs\", \"i\"]);\r\n        if (i === \"1\") {\r\n            style += \"font-style: italic;\";\r\n        }\r\n\r\n        // Underline\r\n        const u = this.getTextByPathList(rPr, [\"attrs\", \"u\"]);\r\n        if (u && u !== \"none\") {\r\n            style += \"text-decoration: underline;\";\r\n        }\r\n\r\n        // Color\r\n        const solidFill = this.getTextByPathList(rPr, [\"a:solidFill\"]);\r\n        if (solidFill) {\r\n            const color = this.parseColor(solidFill, warpObj);\r\n            if (color) {\r\n                style += `color: ${color};`;\r\n            }\r\n        }\r\n\r\n        return `<span style=\"${style}\">${this.escapeHtml(text)}</span>`;\r\n    }\r\n\r\n    private genTable(tableNode: any, graphicFrameNode: any, warpObj: any): string {\r\n        const rows = this.getTextByPathList(tableNode, [\"a:tr\"]);\r\n        if (!rows) return \"\";\r\n\r\n        const xfrmNode = this.getTextByPathList(graphicFrameNode, [\"p:xfrm\"]);\r\n        const position = this.getPosition(xfrmNode, graphicFrameNode);\r\n        const size = this.getSize(xfrmNode);\r\n\r\n        let result = `<table class=\"slide\" style=\"${position} ${size}\">`;\r\n\r\n        const rowArray = Array.isArray(rows) ? rows : [rows];\r\n        rowArray.forEach(rowNode => {\r\n            let rowResult = \"<tr>\";\r\n            const cells = this.getTextByPathList(rowNode, [\"a:tc\"]);\r\n\r\n            if (cells) {\r\n                const cellArray = Array.isArray(cells) ? cells : [cells];\r\n                cellArray.forEach(cellNode => {\r\n                    const cellText = this.getTextByPathList(cellNode, [\"a:txBody\", \"a:p\", \"a:r\", \"a:t\"]) || \"\";\r\n                    rowResult += `<td>${this.escapeHtml(cellText)}</td>`;\r\n                });\r\n            }\r\n\r\n            rowResult += \"</tr>\";\r\n            result += rowResult;\r\n        });\r\n\r\n        result += \"</table>\";\r\n        return result;\r\n    }\r\n\r\n    private genChart(chartNode: any, graphicFrameNode: any, warpObj: any): string {\r\n        const xfrmNode = this.getTextByPathList(graphicFrameNode, [\"p:xfrm\"]);\r\n        const position = this.getPosition(xfrmNode, graphicFrameNode);\r\n        const size = this.getSize(xfrmNode);\r\n\r\n        return `<div class=\"block chart-placeholder\" style=\"${position} ${size} background: #f5f5f5; border: 1px dashed #ccc; display: flex; align-items: center; justify-content: center;\">\r\n      <span>Graphique</span>\r\n    </div>`;\r\n    }\r\n\r\n    // Utility methods used by processors\r\n    private getTextByPathList(node: any, path: string[]): any {\r\n        if (!Array.isArray(path)) {\r\n            throw new Error(\"Error of path type! path is not array.\");\r\n        }\r\n\r\n        if (node === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        let current = node;\r\n        for (let i = 0; i < path.length; i++) {\r\n            current = current[path[i]];\r\n            if (current === undefined) {\r\n                return undefined;\r\n            }\r\n        }\r\n\r\n        return current;\r\n    }\r\n\r\n    private getPosition(xfrmNode: any, parentNode: any): string {\r\n        let x = 0, y = 0;\r\n\r\n        if (xfrmNode?.[\"a:off\"]) {\r\n            x = parseInt(xfrmNode[\"a:off\"][\"attrs\"]?.[\"x\"] || \"0\");\r\n            y = parseInt(xfrmNode[\"a:off\"][\"attrs\"]?.[\"y\"] || \"0\");\r\n        }\r\n\r\n        // Convert EMU to pixels (1 EMU = 1/914400 inch, 1 inch = 96 pixels)\r\n        const pixelX = Math.round(x / 914400 * 96);\r\n        const pixelY = Math.round(y / 914400 * 96);\r\n\r\n        return `left: ${pixelX}px; top: ${pixelY}px;`;\r\n    }\r\n\r\n    private getSize(xfrmNode: any): string {\r\n        let width = 0, height = 0;\r\n\r\n        if (xfrmNode?.[\"a:ext\"]) {\r\n            width = parseInt(xfrmNode[\"a:ext\"][\"attrs\"]?.[\"cx\"] || \"0\");\r\n            height = parseInt(xfrmNode[\"a:ext\"][\"attrs\"]?.[\"cy\"] || \"0\");\r\n        }\r\n\r\n        // Convert EMU to pixels\r\n        const pixelWidth = Math.round(width / 914400 * 96);\r\n        const pixelHeight = Math.round(height / 914400 * 96);\r\n\r\n        return `width: ${pixelWidth}px; height: ${pixelHeight}px;`;\r\n    }\r\n\r\n    private createVideoElement(videoAsset: any, style: string): string {\r\n        const videoData = btoa(String.fromCharCode(...new Uint8Array(videoAsset.data)));\r\n\r\n        return `<video \r\n      controls \r\n      style=\"${style}\"\r\n      src=\"data:${videoAsset.mimeType};base64,${videoData}\"\r\n    >\r\n      Votre navigateur ne supporte pas la lecture de vidéos.\r\n    </video>`;\r\n    }\r\n\r\n    private createImageElement(imageAsset: any, style: string): string {\r\n        const imageData = btoa(String.fromCharCode(...new Uint8Array(imageAsset.data)));\r\n\r\n        return `<img \r\n      style=\"${style}\"\r\n      src=\"data:${imageAsset.mimeType};base64,${imageData}\"\r\n      alt=\"Slide image\"\r\n    />`;\r\n    }\r\n\r\n    private parseColor(solidFill: any, warpObj: any): string | null {\r\n        const srgbClr = this.getTextByPathList(solidFill, [\"a:srgbClr\", \"attrs\", \"val\"]);\r\n        if (srgbClr) {\r\n            return `#${srgbClr}`;\r\n        }\r\n\r\n        const schemeClr = this.getTextByPathList(solidFill, [\"a:schemeClr\", \"attrs\", \"val\"]);\r\n        if (schemeClr) {\r\n            // Map scheme colors to actual colors from theme\r\n            const colorMap: Record<string, string> = {\r\n                'bg1': '#FFFFFF',\r\n                'tx1': '#000000',\r\n                'bg2': '#F2F2F2',\r\n                'tx2': '#1F497D',\r\n                'accent1': '#4F81BD',\r\n                'accent2': '#F79646',\r\n                'accent3': '#9BBB59',\r\n                'accent4': '#8064A2',\r\n                'accent5': '#4BACC6',\r\n                'accent6': '#F596AA'\r\n            };\r\n            return colorMap[schemeClr] || '#000000';\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private escapeHtml(text: string): string {\r\n        const escapeChars: Record<string, string> = {\r\n            '&': '&amp;',\r\n            '<': '&lt;',\r\n            '>': '&gt;',\r\n            '\"': '&quot;',\r\n            \"'\": '&#39;'\r\n        };\r\n\r\n        return text.replace(/[&<>\"']/g, (char) => escapeChars[char]);\r\n    }\r\n}"],"mappings":"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","names":["index_exports","__export","PptxProcessor","__toCommonJS","import_jszip","PptxProcessor","file","arrayBuffer","JSZip","slideIndex","options","slide","index","slides","slideLayouts","slideMasters","media","slideFiles","name","slideFile","slideXml","slideData","layoutFiles","layoutFile","layoutXml","layoutData","masterFiles","masterFile","masterXml","masterData","themeFile","theme","themeXml","mediaFiles","mediaFile","fileName","data","mimeType","asset","ext","xmlString","xmlDoc","node","result","i","attr","child","childName","childObject","width","height","warpObj","html","cSld","spTree","nodeKey","nodeValue","layouts","idTable","idxTable","typeTable","layout","key","shape","id","idx","type","nodes","source","sType","mcFallbackNode","pNode","order","slideLayoutSpNode","slideMasterSpNode","xfrmNode","position","size","blipNode","rId","style","tableNode","chartNode","isUserDrawnBg","slideXfrmNode","txBodyNode","spNode","paragraphs","pPr","runs","algn","lvl","rNode","text","rPr","sz","typeface","solidFill","color","graphicFrameNode","rows","rowNode","rowResult","cells","cellNode","cellText","path","current","parentNode","x","y","pixelX","pixelY","pixelWidth","pixelHeight","videoAsset","videoData","imageAsset","imageData","srgbClr","schemeClr","escapeChars","char"]}